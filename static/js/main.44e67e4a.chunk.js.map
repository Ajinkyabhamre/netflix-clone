{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44e67e4a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchURL, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  //A snippet of code which runs on specific condition/variable\n  useEffect(() => {\n    // if [] is empty, run once when the row loads, and dont run again\n    async function fetchData() {\n      //https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\n      const request = await axios.get(fetchURL);\n\n      //request.data.results ---> data-structure\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  //console.log(movies);\n  //console.table(movies);\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          ></img>\n        ))}\n      </div>\n      {/* when we have trailer URl then show the youtube video */}\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"75ec9b7510a59b0c96ca4a155f697b67\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./request\";\nimport \"./banner.css\";\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchTopRated);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n\n    fetchData();\n  }, []);\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n        \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n      )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"banner_fadebottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Nav.css\";\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1597px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix logo\"\n      />\n\n      <img\n        className=\"nav_avatar\"\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\n        alt=\"Netflix logo\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./request\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchURL={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending\" fetchURL={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchURL={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchURL={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies} />\n      <Row title=\"Romantic Movies\" fetchURL={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}